import pandas as pd
import streamlit as st
#import joblib
import pickle
from data_preprocessing import Processing
from PIL import Image
import catboost

st.set_page_config(page_icon="üèß", page_title="Client_outflow")
#image = Image.open(r'c:\Users\Streamlit\Streamlit_client_flow\img.png')
#st.image('https://github.com/Danil-Belokhvostik/Data-Science/blob/main/Forecasting_the_outflow_of_telecom_customers/img.jpg')
#
#st.image('img.jpg')
st.image('Forecasting_the_outflow_of_telecom_customers/img.jpg')
#st.image(image)
st.title('–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')

# –ó–∞–¥–∞–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–∏

#joblib_file = 'Forecasting_the_outflow_of_telecom_customers/joblib_cbc.pkl'
#joblib_file = r'c:\Users\Streamlit\Streamlit_client_flow\joblib_cbc.pkl'

joblib_file = 'Forecasting_the_outflow_of_telecom_customers/pickle_model.pkl'
#joblib_file = r'c:\Users\Streamlit\Streamlit_client_flow\pickle_model.pkl'

#joblib_file = r'c:\Users\Streamlit\Streamlit_client_flow\joblib_cbc.pkl'


def load_data():
    uploaded_file = st.file_uploader(label='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏', type=['csv'])
    if uploaded_file is not None:

        return pd.read_csv(uploaded_file)
    else:
        return None

def predict(df):
    # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Processing
    proc = Processing()

    # –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±–æ—Ä–∫–∏
    delete_features = ['begin_date', 'day', 'month', 'year', 'end_date', 'lifetime_m', 'total_charges']

    # –ü—Ä–æ–≤–µ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    df_proc = proc.entire_graph(df, delete_features)

    # –ó–∞–≥—Ä—É–∑–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ load –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ joblib

    #joblib_cbc = joblib.load(joblib_file, 'rb')

    joblib_cbc = pickle.load(open(joblib_file, 'rb'))
    # –°–¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    joblib_cbc_predict = joblib_cbc.predict(df_proc)

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    results = pd.DataFrame({'result':joblib_cbc_predict}, index=df_proc.index)
    return results, df_proc

@st.cache
def convert_df(results):
     # IMPORTANT: Cache the conversion to prevent computation on every rerun
     return df.to_csv().encode('utf-8')


df = load_data()
if df is not None:
    results, df_proc = predict(df)

    if results is not None:

        if st.button('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'):
            st.dataframe(df)
            if st.button('–°–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ'):
                st.dataframe(df)
        if st.button('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'):
            st.dataframe(df_proc)
            if st.button('–°–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ'):
                st.dataframe(df_proc)
        if st.button('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å—Ñ–∏–∫–∞—Ü–∏–∏'):
            st.markdown('# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏')
            st.markdown('- 0 - –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è')
            st.markdown('- 1 - —Ä–∞—Å—Ç–æ—Ä–≥–Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä')
            st.dataframe(results)
            if st.button('–°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'):
                st.dataframe(results)

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        csv = convert_df(results)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            data=csv,
            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å—Ñ–∏–∫–∞—Ü–∏–∏.csv',
            mime='text/csv')

