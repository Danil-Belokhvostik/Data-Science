# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import pandas as pd
import streamlit as st
import pickle
from data_preprocessing import Processing
# import matplotlib.pyplot as plt
from matplotlib.figure import Figure
import seaborn as sns
# from PIL import Image
# import altair as alt

# –ó–∞–¥–∞–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_icon="üí∞",
    page_title="Client_outflow",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/Danil-Belokhvostik/Data-Science/tree/\
        main/–ü—Ä–æ–≥–Ω–æ–∑%20–æ—Ç—Ç–æ–∫–∞%20–∫–ª–∏–µ–Ω—Ç–æ–≤%20–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞%20—Å–≤—è–∑–∏',
        'About': "–í –ø—Ä–æ–µ–∫—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–≤—è–∑–∏ —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"})

# –ó–∞–≥—Ä—É–∑–∏–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã–≤–µ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
st.image('Forecasting_the_outflow_of_telecom_customers/img.jpg')
# st.image('img.jpg')
st.title('–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')

# –ó–∞–¥–∞–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–∏
joblib_file = 'Forecasting_the_outflow_of_telecom_customers/pickle_model.pkl'
# joblib_file = 'pickle_model.pkl'


def load_data():
    uploaded_file = st.file_uploader(label='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏', type=['csv'])
    if uploaded_file is not None:

        return pd.read_csv(uploaded_file)
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict(df):
    # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Processing
    proc = Processing()

    # –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±–æ—Ä–∫–∏
    delete_features = ['begin_date', 'day', 'month', 'year', 'end_date', 'lifetime_m', 'total_charges']

    # –ü—Ä–æ–≤–µ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    df_proc = proc.entire_graph(df, delete_features)

    # –ó–∞–≥—Ä—É–∑–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ load –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ joblib
    joblib_cbc = pickle.load(open(joblib_file, 'rb'))

    # –°–¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    joblib_cbc_predict = joblib_cbc.predict(df_proc)

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    results = pd.DataFrame({'result': joblib_cbc_predict}, index=df_proc.index)
    return results, df_proc

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
def results_displaying(data, proc_data, result, hist_choice):

    data_before_proc = st.expander('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')
    # if st.button('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'):
    with data_before_proc:
        st.dataframe(data)

    data_after_proc = st.expander('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')
    with data_after_proc:
        st.dataframe(proc_data)

    st.markdown('# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    # –°–æ–∑–¥–∞–¥–∏–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    col1, col2, col3 = st.columns(3)

    with col1:

        show_result = st.expander('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å—Ñ–∏–∫–∞—Ü–∏–∏ üëâ')

        with show_result:

            st.markdown('- 0 - –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è')
            st.markdown('- 1 - —Ä–∞—Å—Ç–æ—Ä–≥–Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä')
            st.dataframe(result)


    with col3:

        show_result = st.expander('–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞')
        with show_result:

            if hist_choice == '–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å':

                sns.set_theme(context='talk', style='darkgrid', palette='pastel')
                fig = Figure(figsize=(10, 10))
                ax = fig.subplots()
                sns.histplot(result,
                             x='result',
                             hue='result',
                             palette='deep',
                             ax=ax,
                             discrete=True
                             )
                ax.set_xticks([0, 1])
                ax.set_xlabel('–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–æ–≤')
                ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                ax.legend(['–ö–ª–∏–µ–Ω—Ç —Ä–∞—Å—Ç–æ—Ä–≥–Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä', '–ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è'])
                st.pyplot(fig)

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    csv = convert_df(result)
    st.download_button(
        label="‚¨áÔ∏è–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        data=csv,
        file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å—Ñ–∏–∫–∞—Ü–∏–∏.csv',
        mime='text/csv')

@st.cache
def convert_df(results):
    return df.to_csv().encode('utf-8')

# –°–æ–∑–¥–∞–¥–∏–º –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
start_col1, start_col2, start_col3 = st.columns(3)

with start_col1:

    # –ó–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ
    df = load_data()

    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É
    use_example_file = st.checkbox(
        "Use example file", False, help="Use in-built example file to demo the app"
    )

    # –î–æ–±–∞–≤–∏–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
    if use_example_file:
        # uploaded_file = "telecom_cut_samle_features.csv"
        uploaded_file = "Forecasting_the_outflow_of_telecom_customers/telecom_cut_samle_features.csv"
        df = pd.read_csv(uploaded_file)
        st.success("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–±–∞–±–æ—Ç–∞–Ω—ã")

    elif df is not None:
        st.success("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–±–∞–±–æ—Ç–∞–Ω—ã")

    else:
        st.error("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ"
                 "(https://clck.ru/sdPMe)")

# –ù–∞—Å—Ç—Ä–æ–∏–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
if df is not None:

    results, df_proc = predict(df)

    if results is not None:

        # –î–æ–±–∞–≤–∏–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        st.sidebar.markdown("## –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π")

        # –í—ã–±–æ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients = list(df['customerID'].unique())
        clients.insert(0, '–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã')
        client_choice = st.sidebar.selectbox("–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞", clients)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        hist_answer = ['–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å', '–ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å']
        hist_choice = st.sidebar.selectbox("–ù—É–∂–Ω–∞ –ª–∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", hist_answer)

        if client_choice == '–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã':
            results_displaying(df, df_proc, results, hist_choice)
        else:
            df_client_index = list(df.customerID).index(client_choice)
            results_displaying(df[df.index == df_client_index],
                               df_proc[df_proc.index == client_choice],
                               results[results.index == client_choice],
                               hist_choice)